Setup
Comece criando um diret√≥rio chamado testes-e2e-com-cypress/
Via terminal de linha de comando, visite o diret√≥rio rec√©m criado (cd testes-e2e-com-cypress/)
Execute o comando git init
Na raiz do projeto, crie um arquivo oculto chamado .gitignore com o seguinte conte√∫do:
.DS_Store
cypress.env.json
cypress/downloads/
cypress/screenshots/
cypress/videos/
node_modules/
Ainda na raiz do projeto, crie um arquivo chamado README.md com o seguinte conte√∫do:
# Testes _end-to-end_ com Cypress

TBD.
Execute o comando npm init -y
Execute o comando npm install cypress@12.15.0 --save-dev (ou npm i cypress@12.15.0 -D para a vers√£o curta)
Tamb√©m na raiz do projeto, crie um arquivo chamado cypress.env.json e outro chamado cypress.env.example.json. Inicialize ambos como um objeto vazio ({})
Execute o comando npx cypress open para abrir o Cypress pela primeira vez
Com a Cypress App aberta, clique no box E2E Testing
Na se√ß√£o Configuration Files, clique em Continue
Na se√ß√£o Choose a browser, selecione o Electron (ou Chrome) e clique em Start E2E Testing in [browser]
Com o navegador aberto, clique em Create new spec, aceite o nome padr√£o, clique em Create spec e ent√£o clique em Okay, run the spec.
Por fim, feche o navegador e a Cypress App.
Obs.: Ap√≥s seguir os passos acima, o Cypress automaticamente criar√° a estrutura do projeto de testes, com o arquivo cypress.config.js e o diret√≥rio cypress/ com os sub-diret√≥rios e2e/, fixtures/ e support/, com seus respetivos arquivos.

2

No terminal de linha de comando, no diret√≥rio testes-e2e-com-cypress/, execute o comando npm install eslint@8.43.0 --save-dev (ou npm i eslint@8.43.0 -D para a vers√£o curta)
Logo ap√≥s, execute o comando npx eslint --init e escolhas as op√ß√µes que fizerem sentido para voc√™ (se n√£o souber o que escolher, assita a aula onde executo tal comando e veja as op√ß√µes que escolhi, ou ent√£o, simplesmente copie a vers√£o final do meu arquivo .eslintrc.json, conforme abaixo)
// .eslintrc.json

{
    "env": {
        "browser": true,
        "commonjs": true,
        "es2021": true,
        "node": true
    },
    "extends": "eslint:recommended",
    "parserOptions": {
        "ecmaVersion": 12
    },
    "rules": {
        "indent": [
            "error",
            2
        ],
        "linebreak-style": [
            "error",
            "unix"
        ],
        "quotes": [
            "error",
            "single"
        ],
        "semi": [
            "error",
            "never"
        ],
        "no-trailing-spaces": [
            "error"
        ]
    }
}
Exerc√≠cio extra 1 - eslint-plugin-cypress
No terminal de linha de comando, no diret√≥rio testes-e2e-com-cypress/, execute o comando npm install eslint-plugin-cypress@2.13.3 --save-dev (ou npm i eslint-plugin-cypress@2.13.3 -D para a vers√£o curta)
Logo ap√≥s, dentro do diret√≥rio cypress/, crie outro arquivo chamado .eslintrc.json com o seguinte conte√∫do:
{
  "extends": [
    "plugin:cypress/recommended"
  ],
  "rules": {
    "cypress/no-force": "error",
    "cypress/assertion-before-screenshot": "error",
    "cypress/no-pause": "error"
  }
}
üßë‚Äçüè´ Para mais detalhes sobre cada uma das regras do eslint-plugin-cypress, assista a Live An√°lise est√°tica de c√≥digo com o eslint-plugin-cypress no Canal TAT no YouTube.

Exerc√≠cio extra 2 - npm scripts
Agora que o ESLint est√° configurado, √© hora de criar scripts para validar o c√≥digo estaticamente, al√©m de corrigir erros automaticamente (quando poss√≠vel).

No arquivo package.json, crie um script chamado lint com o valor eslint cypress/**/*.js && eslint cypress.config.js
Ainda no mesmo arquivo, crie um script chamado lint:fix com o valor eslint cypress/**/*.js --fix && eslint cypress.config.js --fix
Por fim, execute o comando npm run lint para analisar o c√≥digo existente estaticamente, e caso necess√°rio, execute tamb√©m o comando npm run lint:fix
Alguns problemas ser√£o corrigidos automaticamente, por√©m, se voc√™ ver os erros abaixo, n√£o se preocupe, iremos lidar com eles em outra aula.

  5:21  error  'on' is defined but never used      no-unused-vars
  5:25  error  'config' is defined but never used  no-unused-vars

‚úñ 2 problems (2 errors, 0 warnings)
Exerc√≠cio extra 3 - VSCode ESLint Plugin
Se voc√™ for usu√°rio(a) do VSCode, instale o plugin ESLint e tenha an√°lise est√°tica em tempo de execu√ß√£o em sua IDE favorita.

Mostre ao mundo o que voc√™ aprendeu
Como forma de demonstrar √† sua rede profissional que voc√™ se importa com c√≥digo de qualidade, poste o seguinte no LinkedIn.

Estou fazendo o curso de testes end-to-end com Cypress da Escola TAT no Udemy, onde aprendi sobre an√°lise est√°tica de c√≥digo utilizando as bibliotecas eslint e eslint-plugin-cypress. #TalkingAboutTesting #EscolaTAT #Cypress

Observa√ß√£o: Lembre de me marcar em sua publica√ß√£o. Segue meu perfil no LinkedIn. Aproveita pra se conectar comigo!

# instalando o faker
$ npm install --save-dev @faker-js/faker


